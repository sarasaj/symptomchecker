{"ast":null,"code":"var _jsxFileName = \"/Users/saraalhasan/Downloads/perception_experiment_ver_medical-symptom-checker-master/src/components/Patient/Patient2.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Patient.css\";\n\nclass Patient2 extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [{\n        text: \"Patient is overweight or obese\",\n        answer: \"Patient doesn't know\",\n        key: \"question_1\"\n      }, {\n        text: \"Patient smokes cigarettes\",\n        answer: \"Patient doesn't know\",\n        key: \"question_2\"\n      }, {\n        text: \"Patient has been recently injured\",\n        answer: \"Patient doesn't know\",\n        key: \"question_3\"\n      }, {\n        text: \"Patient has high cholesterol\",\n        answer: \"Patient doesn't know\",\n        key: \"question_4\"\n      }, {\n        text: \"Patient has hypertension\",\n        answer: \"Patient doesn't know\",\n        key: \"question_5\"\n      }, {\n        text: \"Patient has diabetes\",\n        answer: \"Patient doesn't know\",\n        key: \"question_6\"\n      }],\n      next_button_available: \"Not available\"\n    };\n\n    this.handleOnChange = (e, questionKey) => {\n      const updatedQuestions = this.state.questions.map(question => {\n        if (question.key === questionKey) {\n          return { ...question,\n            answer: e.target.value\n          };\n        }\n\n        return question;\n      });\n      const allAnswered = updatedQuestions.every(question => question.answer !== \"\");\n      this.setState({\n        questions: updatedQuestions,\n        next_button_available: allAnswered ? \"Available\" : \"Not available\"\n      }, () => {\n        this.props.callback(updatedQuestions);\n      });\n    };\n\n    this.renderQuestions = () => {\n      return this.state.questions.map(question => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"radioButtonDiv\",\n        key: question.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }, question.text), /*#__PURE__*/React.createElement(\"form\", {\n        className: \"usa-form FormElement\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"usa-radio margin-x-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        className: `usa-radio__input ${question.text}`,\n        onChange: e => this.handleOnChange(e, question.key),\n        id: `${question.key}_Yes`,\n        type: \"radio\",\n        checked: question.answer === \"Yes\",\n        value: \"Yes\",\n        name: question.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        className: \"usa-radio__label\",\n        htmlFor: `${question.key}_Yes`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      }, \"Yes\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"usa-radio margin-x-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        className: `usa-radio__input ${question.text}`,\n        onChange: e => this.handleOnChange(e, question.key),\n        id: `${question.key}_No`,\n        type: \"radio\",\n        checked: question.answer === \"No\",\n        value: \"No\",\n        name: question.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        className: \"usa-radio__label\",\n        htmlFor: `${question.key}_No`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }\n      }, \"No\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"usa-radio margin-x-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        className: `usa-radio__input ${question.text}`,\n        onChange: e => this.handleOnChange(e, question.key),\n        id: `${question.key}_DontKnow`,\n        type: \"radio\",\n        checked: question.answer === \"Patient doesn't know\",\n        value: \"Patient doesn't know\",\n        name: question.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        className: \"usa-radio__label\",\n        htmlFor: `${question.key}_DontKnow`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, \"I don't know\")))));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"Patient2\",\n      className: \"tablet:grid-col padding-x-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"width-full flex-column flex-align-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        marginBottom: \"15px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, \"Please check all the statements below that apply to you\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"Select one answer in each row\")), this.renderQuestions());\n  }\n\n}\n\nexport default Patient2;","map":{"version":3,"sources":["/Users/saraalhasan/Downloads/perception_experiment_ver_medical-symptom-checker-master/src/components/Patient/Patient2.jsx"],"names":["React","Component","Patient2","state","questions","text","answer","key","next_button_available","handleOnChange","e","questionKey","updatedQuestions","map","question","target","value","allAnswered","every","setState","props","callback","renderQuestions","render","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Patient.css\";\n\nclass Patient2 extends Component {\n  state = {\n    questions: [\n      {\n        text: \"Patient is overweight or obese\",\n        answer: \"Patient doesn't know\",\n        key: \"question_1\",\n      },\n      {\n        text: \"Patient smokes cigarettes\",\n        answer: \"Patient doesn't know\",\n        key: \"question_2\",\n      },\n      {\n        text: \"Patient has been recently injured\",\n        answer: \"Patient doesn't know\",\n        key: \"question_3\",\n      },\n      {\n        text: \"Patient has high cholesterol\",\n        answer: \"Patient doesn't know\",\n        key: \"question_4\",\n      },\n      {\n        text: \"Patient has hypertension\",\n        answer: \"Patient doesn't know\",\n        key: \"question_5\",\n      },\n      {\n        text: \"Patient has diabetes\",\n        answer: \"Patient doesn't know\",\n        key: \"question_6\",\n      },\n    ],\n    next_button_available: \"Not available\",\n  };\n\n  handleOnChange = (e, questionKey) => {\n    const updatedQuestions = this.state.questions.map((question) => {\n      if (question.key === questionKey) {\n        return { ...question, answer: e.target.value };\n      }\n      return question;\n    });\n\n    const allAnswered = updatedQuestions.every(\n      (question) => question.answer !== \"\"\n    );\n\n    this.setState(\n      {\n        questions: updatedQuestions,\n        next_button_available: allAnswered ? \"Available\" : \"Not available\",\n      },\n      () => {\n        this.props.callback(updatedQuestions);\n      }\n    );\n  };\n\n  renderQuestions = () => {\n    return this.state.questions.map((question) => (\n      <div className=\"radioButtonDiv\" key={question.key}>\n        <h3>{question.text}</h3>\n        <form className=\"usa-form FormElement\">\n          <div className=\"usa-radio margin-x-1\">\n            <input\n              className={`usa-radio__input ${question.text}`}\n              onChange={(e) => this.handleOnChange(e, question.key)}\n              id={`${question.key}_Yes`}\n              type=\"radio\"\n              checked={question.answer === \"Yes\"}\n              value=\"Yes\"\n              name={question.key}\n            />\n            <label className=\"usa-radio__label\" htmlFor={`${question.key}_Yes`}>\n              Yes\n            </label>\n          </div>\n          <div className=\"usa-radio margin-x-1\">\n            <input\n              className={`usa-radio__input ${question.text}`}\n              onChange={(e) => this.handleOnChange(e, question.key)}\n              id={`${question.key}_No`}\n              type=\"radio\"\n              checked={question.answer === \"No\"}\n              value=\"No\"\n              name={question.key}\n            />\n            <label className=\"usa-radio__label\" htmlFor={`${question.key}_No`}>\n              No\n            </label>\n          </div>\n          <div className=\"usa-radio margin-x-1\">\n            <input\n              className={`usa-radio__input ${question.text}`}\n              onChange={(e) => this.handleOnChange(e, question.key)}\n              id={`${question.key}_DontKnow`}\n              type=\"radio\"\n              checked={question.answer === \"Patient doesn't know\"}\n              value=\"Patient doesn't know\"\n              name={question.key}\n            />\n            <label className=\"usa-radio__label\" htmlFor={`${question.key}_DontKnow`}>\n              I don't know\n            </label>\n          </div>\n        </form>\n      </div>\n    ));\n  };\n\n  render() {\n    return (\n      <div id=\"Patient2\" className=\"tablet:grid-col padding-x-2\">\n        <div className=\"width-full flex-column flex-align-center\">\n          <h2 style={{ marginBottom: \"15px\" }}>\n            Please check all the statements below that apply to you\n          </h2>\n          <p>Select one answer in each row</p>\n        </div>\n        {this.renderQuestions()}\n      </div>\n    );\n  }\n}\n\nexport default Patient2;\n"]},"metadata":{},"sourceType":"module"}